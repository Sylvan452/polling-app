{
  "project": "Polling App",
  "rules": [
    {
      "description": "Follow the Next.js App Router structure",
      "details": "Place route pages under /app. Poll-related pages live under /app/polls/. API routes live under /app/api/."
    },
    {
      "description": "Use react-hook-form with shadcn/ui for all forms",
      "details": "When creating or refactoring forms (e.g. new poll form, login form), always use react-hook-form for validation and state management, and shadcn/ui components (Input, Button, Form) for UI consistency."
    },
    {
      "description": "Supabase integration",
      "details": "Use Supabase client for authentication (sign up, sign in, session handling) and database queries. Always import from '@/lib/supabaseClient'. Keep server-side calls inside /app/api/."
    },
    {
      "description": "Component structure",
      "details": "Use server components for data fetching, and client components only where interactivity is required (forms, buttons, voting interactions)."
    },
    {
      "description": "Scaffolding expectations",
      "details": "When asked to scaffold a feature (e.g. 'create a form to submit a new poll'), the assistant should create files in the right folder (/app/polls/new/page.tsx), use react-hook-form + shadcn/ui, and call Supabase insert query inside an API route (/app/api/polls/route.ts)."
    },
    {
      "description": "Keep QR logic in src/lib/qr and expose small, typed helpers",
      "details": "Helpers must be pure where possible and return strings or data URLs. Expose createSignedPollUrl on server only."
    },
    {
      "description": "Client components must be marked 'use client' and only call public endpoints",
      "details": "UI components call /api/polls/[id]/qr route. Do not call server-only functions directly from client code."
    },
    {
      "description": "Use signed short-lived URLs for private polls",
      "details": "When poll is private, QR links must include a signed token that expires in <= 24 hours."
    },
    {
      "description": "Cache generated QR payloads",
      "details": "Persist generated SVG or Data-URL in a simple cache or CDN. Avoid regenerating per request unless token is unique."
    },
    {
      "description": "Log and surface errors clearly in UI",
      "details": "Any QR generation failure should return readable JSON with status codes. Client shows short message and retry link."
    }
  ]
}
